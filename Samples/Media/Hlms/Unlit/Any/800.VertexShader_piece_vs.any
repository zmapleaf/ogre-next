
#include "/media/matias/Datos/SyntaxHighlightingMisc.h"

@piece( DefaultHeaderVS )
	@insertpiece( Common_Matrix_DeclUnpackMatrix4x4 )

	// START UNIFORM DECLARATION
	@insertpiece( PassStructDecl )
	@insertpiece( InstanceStructDecl )
	@insertpiece( custom_vs_uniformStructDeclaration )
	// END UNIFORM DECLARATION

	@property( !hlms_identity_world )
		@piece( worldViewProj )worldViewProj@end
	@else
		@property( !hlms_identity_viewproj_dynamic )
			@piece( worldViewProj )passBuf.viewProj[@value(hlms_identity_viewproj)]@end
		@else
			@piece( worldViewProj )passBuf.viewProj[worldMaterialIdx[finalDrawId].z]@end
		@end
	@end
@end

@piece( DefaultBodyVS )
	@property( !hlms_identity_world )
		float4x4 worldViewProj = UNPACK_MAT4( worldMatBuf, finalDrawId );
	@end

	@property( !hlms_dual_paraboloid_mapping )
		outVs_Position = mul( inVs_vertex, @insertpiece( worldViewProj ) );
	@end

	@property( hlms_dual_paraboloid_mapping )
		//Dual Paraboloid Mapping
		outVs_Position.w	= 1.0f;
		outVs_Position.xyz	= (vertex * @insertpiece( worldViewProj )).xyz;
		float L = length( outVs_Position.xyz );
		outVs_Position.z	+= 1.0f;
		outVs_Position.xy	/= outVs_Position.z;
		outVs_Position.z	= (L - NearPlane) / (FarPlane - NearPlane);
	@end

	@property( !hlms_shadowcaster )
		@property( hlms_colour )
			outVs.colour = inVs_colour;
		@end

		@property( texture_matrix )
			float4x4 textureMatrix;
		@end

		@foreach( out_uv_count, n )
			@property( out_uv@n_texture_matrix )
				textureMatrix = UNPACK_MAT4( animationMatrixBuf,
											 (worldMaterialIdx[finalDrawId].x << 4u) +
											 @value( out_uv@n_tex_unit )u );
				outVs.uv@value( out_uv@n_out_uv ).@insertpiece( out_uv@n_swizzle ) =
						mul( float4( uv@value( out_uv@n_source_uv ).xy, 0, 1 ), textureMatrix ).xy;
			@else
				outVs.uv@value( out_uv@n_out_uv ).@insertpiece( out_uv@n_swizzle ) =
						inVs_uv@value( out_uv@n_source_uv ).xy;
			@end
		@end

		@property( syntax != metal )
			outVs.drawId = finalDrawId;
		@else
			outVs.materialId = (ushort)worldMaterialIdx[finalDrawId].x;
		@end
	@end

	@property( hlms_global_clip_planes || (hlms_shadowcaster && (exponential_shadow_maps || hlms_shadowcaster_point)) )
		float3 worldPos = mul( outVs_Position, passBuf.invViewProj ).xyz;
	@end
	@insertpiece( DoShadowCasterVS )

	@property( hlms_global_clip_planes )
		outVs_clipDistance0 = dot( float4( worldPos.xyz, 1.0 ), passBuf.clipPlane0.xyzw );
	@end

	@insertpiece( custom_vs_posExecution )
@end
